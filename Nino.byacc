%token NAME, LITERAL, IF, ELSE, ELSEIF, VAR, WHILE, OPNAME, RETURN
%%

start
  :	program	{ generateProgram(name,((Vector<Object>)($1)).toArray()); }
  ;

program
  : program function  { ((Vector<Object>)($1)).add($2); $$=$1; }
  | function  { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
  ;

function
  : NAME  {
              varCount = 0;
              varTable = new HashMap<String,Integer>();
          }
    '(' optparlist ')' '{' decls exprs '}'
          {
            $$ = new Object[]{$1, $4, $7, ((Vector<Object>)($8)).toArray()};
          }
  ;

parlist
  : NAME {$$ = 1; addVar($1);}
  | parlist ',' NAME {$$ = 1+$1; addVar($3);}
  ;

optparlist
  : {$$ = 0;}
  | parlist { $$ = $1;}
  ;

decls
  : {$$ = 0;}
  | decls decl ';' {$$ = $1+$2;}
  ;

decl
  : VAR parlist {$$ = $2;}
  ;

exprs
  : expr ';' {$$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
  | exprs expr ';' {((Vector<Object>)($1)).add($2); $$=$1;}
  ;

expr
  : RETURN expr {$$ = new Object[]{"RETURN", $2};}
  | NAME '=' expr {$$ = new Object[]{"STORE", findVar($1), $3};}
  | binopexpr {$$ = $1;}
  ;

binopexpr
  : smallexpr {$$ = $1;}
  | binopexpr OPNAME smallexpr {$$ = new Object[]{"CALL", $2, $3};}
  ;

smallexpr
  : NAME {$$ = new Object[]{"NAME", findVar($1)};}
  | NAME '(' optexpr ')' {$$ = new Object[]{"CALL", $1, $3};}
  | OPNAME smallexpr {$$ = new Object[]{"OPNAME", $1, $2};}
  | LITERAL { $$ = new Object[]{"LITERAL", $1};}
  | '(' expr ')' {$$ = $2;}
  | IF expr body elseifexpr elseexpr {$$ = new Object[]{"IF", $2, $3, $4, $5};}
  | WHILE expr body {$$ = new Object[]{"WHILE", $2, $3};}
  ;

optexpr
  : {$$ = null;}
  | nonemptyoptexpr {$$ = $1;}
  ;

nonemptyoptexpr
  : expr {$$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1);}
  | nonemptyoptexpr ',' expr {((Vector<Object>)($1)).add($3); $$=$1;}
  ;

elseifexpr
  : {$$ = null;}
  | elseifexpr ELSEIF expr body {$$ = new Object[]{"ELSEIF", $3, $4, $1};}
  ;

elseexpr
  : ELSE body  {$$ = new Object[]{"ELSE", $2};}
  | {$$ = null;}
  ;

body
  : '{' exprs '}' {$$ = $2;}
  ;

%%

private static int varCount;
private static HashMap<String,Integer> varTable;
private NanoMorphoLexer lexer;

private static void addVar( String name )
{
  if( varTable.get(name) != null )
  	throw new Error("Variable "+name+" already exists, near line "+NanoMorphoLexer.getLine());
  varTable.put(name,varCount++);
}

private static int findVar( String name )
{
	Integer res = varTable.get(name);
	if( res == null )
		throw new Error("Variable "+name+" does not exist, near line "+NanoMorphoLexer.getLine());
	return res;
}

public NinoParser(Reader r) {
	lexer = new NanoMorphoLexer(r,this);
}

private int yylex()
{
	int yyl_return = -1;
	try
	{
		yylval = null;
		yyl_return = lexer.yylex();
		if( yylval==null )
			yylval = new NinoParserVal(NinoParser.yyname[yyl_return]);
	}
	catch (IOException e)
	{
		System.err.println("IO error: "+e);
	}
	return yyl_return;
}

public void yyerror( String error )
{
	System.err.println("Error: "+error);
	System.err.println("Line: "+lexer.getLine());
	System.err.println("Column: "+lexer.getColumn());
	System.exit(1);
}

public static void main( String[] args) 
{
	NinoParser par = new NinoParser(new FileReader(args[0]));
	par.yyparse();
}

static void generateProgram( String filename, Object[] funs )
{
  String programname = filename.substring(0,filename.indexOf('.'));
  System.out.println("\""+programname+".mexe\" = main in");
  System.out.println("!");
  System.out.println("{{");
  for( Object f: funs )
  {
      generateFunction((Object[])f);
  }
  System.out.println("}}");
  System.out.println("*");
  System.out.println("BASIS;");
}

static void generateFunction( Object[] fun )
{
  //fun = {fname, argcount, varcount, res[]};
  String fname = (String)fun[0];

  int argCount = (int)fun[1];
  int varCount = (int)fun[2];
  System.out.println("#\""+fname+"[f"+argCount+"]\" =");

  System.out.println("[");

  for(int k = 0; k<varCount;k++){
    System.out.println("(MakeVal null)");
    System.out.println("(Push)");
  }

  for(Object e:(Object[])fun[3]){
    generateExpr((Object[])e);
  }
  System.out.println("(Return)");
  System.out.println("];");
}

static int nextLab = 0;

static void generateExpr( Object[] e )
{
  switch((String)e[0]){
    case "NAME":
      if(e[1] == null){}
      System.out.println("(Fetch "+e[1]+")");
      return;
    case "LITERAL":
      System.out.println("(MakeVal "+(String)e[1]+")");
      return;
    case "RETURN":
      generateExpr((Object[])e[1]);
      System.out.println("(Return)");
      return;
    case "OPNAME":
      generateExpr((Object[])e[2]);
      System.out.println("(Call \""+e[1]+"[f1]\" "+1+")");
      return;
    case "IF":
      //e = {"IF" expr body elseifexpr elseexpr}
      Object[] argu = (Object[])e[3];
      int labElse = nextLab++;
      int labEnd = nextLab++;
      generateExpr((Object[])e[1]);
      System.out.println("(GoFalse _"+labElse+")");
      generateBody((Object[])e[2]);
      System.out.println("(Go _"+labEnd+")");
      for(int i = 0; i<argu.length-1;i+=3){
        System.out.println("_"+labElse+":");
        generateExpr((Object[])argu[i+1]);
        System.out.println("(GoFalse _"+labElse+")");
        generateBody((Object[])argu[i+2]);
        System.out.println("(Go _"+labEnd+")");
      }
        System.out.println("_"+labElse+":");
        generateBody((Object[])e[4]);
        System.out.println("_"+labEnd+":");
        return;
      case "WHILE":
        int labStart = nextLab++;
        int labQuit = nextLab++;
        System.out.println("_"+labStart+":");
        generateExpr((Object[])e[1]);
        System.out.println("(GoFalse _"+labQuit+")");
        generateBody((Object[])e[2]);
        System.out.println("(Go _"+labStart+")");
        System.out.println("_"+labQuit+":");
        return;
      case "CALL":
        //e = {"CALL", name, [expr,...,expr]}
        Object[] args = (Object[])e[2];
        if( args.length!=0){
          generateExpr((Object[])args[0]);
        }
        for (int i = 1; i!=args.length; i++){
          System.out.println("(Push)");
          generateExpr((Object[])args[i]);
        }
        System.out.println("(Call #\""+e[1]+"[f"+args.length+"]\" "+args.length+")");
        return;
      case "STORE":
        generateExpr((Object[])e[2]);
        System.out.println("(Store "+e[1]+")");
        return;
  }
}

static void generateBody( Object[] bod )
{
	for(int i=0; i<bod.length; i++) {
		generateExpr((Object[])bod[i]);
  }
}
